const e=JSON.parse('{"key":"v-c6746738","path":"/my-world/personal-project/Java%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93/0.html","title":"项目概述","lang":"zh-CN","frontmatter":{"title":"项目概述","order":1,"date":"2022-12-05T00:00:00.000Z","category":["个人项目"],"tag":["Java","数据库"],"description":"前言 该项目写完也有一段时间了，为了避免以后忘记该项目的一些实现的原理，所以写下这篇博客来记录一下该项目的设计等 项目整体 MuziDB分为前端与后端，前后端交互通过socket进行交互，前端的作用就是读取用户输入并发送到后端进行执行然后输出返回结果，并等待下一次的输入，后端则需要解析SQL，尝试执行并返回结果。MuziDB的后端分为五个模块 Transaction Manager (TM ) Data Manager (DM) Version Manager (VM) Index Manager (IM) Table Manager (TBM)","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/my-world/personal-project/Java%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93/0.html"}],["meta",{"property":"og:title","content":"项目概述"}],["meta",{"property":"og:description","content":"前言 该项目写完也有一段时间了，为了避免以后忘记该项目的一些实现的原理，所以写下这篇博客来记录一下该项目的设计等 项目整体 MuziDB分为前端与后端，前后端交互通过socket进行交互，前端的作用就是读取用户输入并发送到后端进行执行然后输出返回结果，并等待下一次的输入，后端则需要解析SQL，尝试执行并返回结果。MuziDB的后端分为五个模块 Transaction Manager (TM ) Data Manager (DM) Version Manager (VM) Index Manager (IM) Table Manager (TBM)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-28T18:14:04.000Z"}],["meta",{"property":"article:author","content":"CodeVmore"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2022-12-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-28T18:14:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-28T18:14:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeVmore\\",\\"url\\":\\"https://mrhope.site\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"项目整体","slug":"项目整体","link":"#项目整体","children":[]},{"level":2,"title":"项目结构","slug":"项目结构","link":"#项目结构","children":[]},{"level":2,"title":"项目涉及四个文件","slug":"项目涉及四个文件","link":"#项目涉及四个文件","children":[]}],"git":{"createdTime":1682705644000,"updatedTime":1682705644000,"contributors":[{"name":"李博","email":"libo04@rd.netease.com","commits":1}]},"readingTime":{"minutes":3.42,"words":1026},"filePathRelative":"my-world/personal-project/Java实现的简易数据库/0.md","localizedDate":"2022年12月5日","excerpt":"<h2> 前言</h2>\\n<p>该项目写完也有一段时间了，为了避免以后忘记该项目的一些实现的原理，所以写下这篇博客来记录一下该项目的设计等</p>\\n<h2> 项目整体</h2>\\n<p>MuziDB分为前端与后端，前后端交互通过socket进行交互，前端的作用就是读取用户输入并发送到后端进行执行然后输出返回结果，并等待下一次的输入，后端则需要解析SQL，尝试执行并返回结果。MuziDB的后端分为五个模块</p>\\n<blockquote>\\n<p>Transaction Manager (TM )</p>\\n<p>Data Manager (DM)</p>\\n<p>Version Manager (VM)</p>\\n<p>Index Manager (IM)</p>\\n<p>Table Manager (TBM)</p>\\n</blockquote>","autoDesc":true}');export{e as data};
