import{_ as n,X as s,Y as a,a3 as p}from"./framework-4966486c.js";const t={},e=p(`<p>DM确实是一个比较困难的编写地方，所以我们将分为好几个章节来讲解</p><h2 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法" aria-hidden="true">#</a> 引用计数法</h2><p>为啥使用引用计数而不使用LRU，如果使用LRU缓存，那么只需要设计一个get(key) 接口即可，释放缓存可以在缓存满了之后自动完成，但是在这样一个场景下，某个时刻缓存满了，缓存驱逐了一个资源，但是这个缓存的资源可能是另一个线程正在被需要的，那么这个缓存是否应该回源(回源的意思就是写回磁盘)，如果回源那么又需要那产生抖动，如果不回源，那么可能会造成脏页，MySQL可能对此做了许多优化，而在本项目中就使用比较简单的引用计数法</p><h2 id="缓存的抽象类" tabindex="-1"><a class="header-anchor" href="#缓存的抽象类" aria-hidden="true">#</a> 缓存的抽象类</h2><p>这个类是一个比较重要的缓存类，比如获取数据都是调用这个缓存类中的方法，当缓存中如果没有需要获取的资源的时候就需要从文件中读取进缓存(getForCache 方法)，同时也有着将资源回源(将缓存中的数据写回数据中)的方法(releaseForCache)，因为这是一个抽取出来的缓存公用的类，对于页面、数据的缓存其实从文件中读取出来的格式存在一些差异，所以getForCache方法与releaseForCache方法由具体继承这个类的子类去实现</p><h3 id="缓存记录" tabindex="-1"><a class="header-anchor" href="#缓存记录" aria-hidden="true">#</a> 缓存记录</h3><p>缓存使用的是三个HashMap，分别缓存实际的数据，当前这个数据被多少线程引用，当前数据是否正在读取 cache 这不用多说就是一个实际缓存的数据 references 就是保存该资源被那些对象所引用 getting 就是一个资源是否在被其它对象获取</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cache<span class="token punctuation">;</span> <span class="token comment">//实际缓存的数据</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> references<span class="token punctuation">;</span> <span class="token comment">// 元素的引用个数</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> getting<span class="token punctuation">;</span>  <span class="token comment">//正在获取某资源的线程</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maxResource<span class="token punctuation">;</span> <span class="token comment">// 缓存的最大缓存资源数</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> cacheCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//缓存元素个数</span>
    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取数据" tabindex="-1"><a class="header-anchor" href="#获取数据" aria-hidden="true">#</a> 获取数据</h3><ol><li>先获取到锁,判断是否有其它线程正在从数据源中读取</li><li>如果有其它线程正在从数据源中读取，那么释放锁等待</li><li>如果没有其它线程从数据源中读取数据，判断缓存中是否有该数据</li><li>如果缓存存在该数据，则直接返回，并且当前资源的引用计数++</li><li>如果缓存中不存在该数据，判断是否会发生OOM如果会发生OOM则抛出异常</li><li>如果不会发生OOM则从数据源中读取该数据并放入缓存，返回</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>getting<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 请求的资源正在被其他线程获取</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 资源在缓存中，直接返回</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">T</span> obj <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                references<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> references<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 尝试获取该资源</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>maxResource <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">==</span> maxResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>CacheFullException</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            count <span class="token operator">++</span><span class="token punctuation">;</span>
            getting<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">T</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            obj <span class="token operator">=</span> <span class="token function">getForCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            count <span class="token operator">--</span><span class="token punctuation">;</span>
            getting<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        getting<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        references<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="释放缓存" tabindex="-1"><a class="header-anchor" href="#释放缓存" aria-hidden="true">#</a> 释放缓存</h3><ol><li>获取当前数据的引用缓存计数然后减一</li><li>判断是否为0，如果为0则进行回源操作</li><li>如果不为0，则修改当前数据的引用计数</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ref <span class="token operator">=</span> references<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ref <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">T</span> obj <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">releaseForCache</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                references<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cacheCount<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                references<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取数据与缓存回源" tabindex="-1"><a class="header-anchor" href="#获取数据与缓存回源" aria-hidden="true">#</a> 获取数据与缓存回源</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">getForCache</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">releaseForCache</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为每个对象的格式不一样所以从缓存中读取和回源操作也存在着一些区别所以由具体的实现类去实现</p><h2 id="数据页的缓存" tabindex="-1"><a class="header-anchor" href="#数据页的缓存" aria-hidden="true">#</a> 数据页的缓存</h2><p>好了现在就是第一个继承缓存抽象类的</p><p>首先在数据页中每个页面都是8k，你也可以自己设置成更大的页面大小</p><h3 id="pageone" tabindex="-1"><a class="header-anchor" href="#pageone" aria-hidden="true">#</a> PageOne</h3><p>其中页面也分为两种页面，一种的普通的记录数据的页面，一种是为了数据库的特殊用途如启动检查等的页面，所以我们把第一页作为特殊的数据页，当我们启动数据库的时候会在其100-107位置8个字节随机保存一串随机字节，当正常关闭的时候会将这个数据拷贝到108-115字节处 所以每次数据库在启动时就会判断这是否是正常关闭</p><h3 id="初始化、拷贝、校验方法" tabindex="-1"><a class="header-anchor" href="#初始化、拷贝、校验方法" aria-hidden="true">#</a> 初始化、拷贝、校验方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setVcOpen</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        pg<span class="token punctuation">.</span><span class="token function">setDirty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVcOpen</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setVcOpen</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">RandomUtil</span><span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token constant">LEN_VC</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>raw<span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token punctuation">,</span><span class="token constant">LEN_VC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setVcClose</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        pg<span class="token punctuation">.</span><span class="token function">setDirty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVcClose</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setVcClose</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token punctuation">,</span>raw<span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token operator">+</span><span class="token constant">LEN_VC</span><span class="token punctuation">,</span><span class="token constant">LEN_VC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkVc</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">checkVc</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkVc</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token operator">+</span><span class="token constant">LEN_VC</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token operator">+</span><span class="token constant">LEN_VC</span><span class="token punctuation">,</span><span class="token constant">OF_VC</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token constant">LEN_VC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pagex" tabindex="-1"><a class="header-anchor" href="#pagex" aria-hidden="true">#</a> PageX</h3><p>普通页面，一个页面以一个2字节来表示该页面的偏移量</p><p>普通页文件格式 [offset][data1][data2]... offset 2字节的偏移量 data 就是数据对象</p><figure><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429211335.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="设置与获取偏移量" tabindex="-1"><a class="header-anchor" href="#设置与获取偏移量" aria-hidden="true">#</a> 设置与获取偏移量</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFSO</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">,</span> <span class="token keyword">short</span> ofData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Parser</span><span class="token punctuation">.</span><span class="token function">short2Byte</span><span class="token punctuation">(</span>ofData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> raw<span class="token punctuation">,</span> <span class="token constant">OF_FREE</span><span class="token punctuation">,</span> <span class="token constant">OF_DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">getFSO</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getFSO</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">getFSO</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Parser</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pg<span class="token punctuation">.</span><span class="token function">setDirty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">short</span> offset <span class="token operator">=</span> <span class="token function">getFSO</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> raw<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFSO</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> raw<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> offset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="页面缓存" tabindex="-1"><a class="header-anchor" href="#页面缓存" aria-hidden="true">#</a> 页面缓存</h3><p>页面缓存就是把磁盘上由文件表示的用内存中的Page对象来表示</p><p><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429211359.png" alt="" loading="lazy"> 前面我们说了Page在内存中的存储样式为 Pagenumber、Data、isDirty 其中的Data存储就是这一个页面的全部数据包括偏移量即Data就是[offset][data][data]</p><h3 id="提供功能" tabindex="-1"><a class="header-anchor" href="#提供功能" aria-hidden="true">#</a> 提供功能</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">int</span> <span class="token function">newPage</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> initData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新建一个页面</span>
    <span class="token class-name">Page</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgno<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span> <span class="token comment">//通过pgno获取一个页面</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放一个缓存</span>

    <span class="token keyword">void</span> <span class="token function">truncateByBgno</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxPgno<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//截断错误页面</span>
    <span class="token keyword">int</span> <span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取页号其实就是新建一个页面时候应该分配第几页</span>
    <span class="token keyword">void</span> <span class="token function">flushPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//回源页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>回源操作</strong></p><p>判断是否是脏页，如果是脏页才写回文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">releaseForCache</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">isDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">flush</span><span class="token punctuation">(</span>pg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pg<span class="token punctuation">.</span><span class="token function">setDirty</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>



    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token class-name">Page</span> pg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pgno <span class="token operator">=</span> pg<span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token function">pageOffset</span><span class="token punctuation">(</span>pgno<span class="token punctuation">)</span><span class="token punctuation">;</span>

        fileLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fc<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fc<span class="token punctuation">.</span><span class="token function">force</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Panic</span><span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            fileLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从数据源中获取数据</strong></p><p>这里的key是页号,通过页号来获取对应的数据并包裹成一个页面返回 获取数据步骤</p><ol><li>获取锁,避免其它人正在修改文件</li><li>通过页号获得页面偏移量</li><li>通过偏移量获取文件数据</li><li>包装成一个页面类返回</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Page</span> <span class="token function">getForCache</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pgno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>key<span class="token punctuation">;</span>
        <span class="token keyword">long</span> offset <span class="token operator">=</span> <span class="token class-name">PageCacheImpl</span><span class="token punctuation">.</span><span class="token function">pageOffset</span><span class="token punctuation">(</span>pgno<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            fc<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
            fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Panic</span><span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fileLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageImpl</span><span class="token punctuation">(</span>pgno<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="页面索引" tabindex="-1"><a class="header-anchor" href="#页面索引" aria-hidden="true">#</a> 页面索引</h2><p>前面说了页面，那么我们要怎么选取一个页面呢？当我们往一个页面插入数据的时候，这个数据需要5k，所以我们需要找到一个页面空闲大小至少为5k的页面，普通的做法是从第一个页面往后开始寻找，直至找到，但是这样速度缓慢，所以我们建立一个页面索引来快速选择一个页面。</p><p>页面索引，缓存了每一页的空闲位置，用于在上层模块进入插入时快速找到一个合适的页面，而无需从磁盘或缓存中检查每一个页面的信息</p><p>通过将空闲页面大小分为40个区间，即每个页面的大小为pageSize，将其分为40份，则每份大小为size = pageSize/40,所以第一个区间存储[0,size),第二个存储[size,2*size).....这里不用担心假如这个页面全为空闲时候是否保存最后一个区间，因为最大空闲区间大小是小于pageSize的，不妨去看看普通页面的定义,每个页面的前两个字节是保存了偏移量的所以无需担心这个问题</p><h3 id="添加页面进索引" tabindex="-1"><a class="header-anchor" href="#添加页面进索引" aria-hidden="true">#</a> 添加页面进索引</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> pgno<span class="token punctuation">,</span><span class="token keyword">int</span> freeSpace<span class="token punctuation">)</span><span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> freeSpace<span class="token operator">/</span><span class="token constant">THRESHOLD</span><span class="token punctuation">;</span>
            lists<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>pgno<span class="token punctuation">,</span>freeSpace<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择一个页面" tabindex="-1"><a class="header-anchor" href="#选择一个页面" aria-hidden="true">#</a> 选择一个页面</h3><p>从PageIndex中获取一个页面也是比较简单 算出区间号然后判断该区间是否存在空闲页面，如果存在则直接返回，不存在就去更大的区间找 可以看到被选取的页会直接从PageIndex中移除，这意味着同一个页面不允许并发写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PageInfo</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> spaceSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> spaceSize <span class="token operator">/</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token constant">INTERVALS_NO</span><span class="token punctuation">)</span> number <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token constant">INTERVALS_NO</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    number <span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> lists<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="填充pageindex" tabindex="-1"><a class="header-anchor" href="#填充pageindex" aria-hidden="true">#</a> 填充PageIndex</h3><p>在DataManager被创建时，需要获取所有的页面并填充PageIndex</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>       <span class="token keyword">void</span> <span class="token function">fillPageIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pageNumber <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pageNumber<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Page</span> pg <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                pg <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Panic</span><span class="token punctuation">.</span><span class="token function">panic</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pIndex<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pg<span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PageX</span><span class="token punctuation">.</span><span class="token function">getFreeSpace</span><span class="token punctuation">(</span>pg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pg<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","2.html.vue"]]);export{k as default};
