import{_ as n,X as s,Y as a,a3 as p}from"./framework-4966486c.js";const t={},e=p(`<p>IM就是维护了一颗B+树，目前我们维护的B+树只是非聚簇索引,同时最底层就是简单的单向链表(姑且可以这么说) 前面三个模块与该模块相比还是比较难的，但是只要仔细还是能够学会的，所以我们先从简单的说起</p><h2 id="node节点" tabindex="-1"><a class="header-anchor" href="#node节点" aria-hidden="true">#</a> Node节点</h2><p>B+树是由一个一个的Node组成，每个Node都存储在一条DataItem中，这是<strong>DataItem</strong>，<strong>DataItem</strong> ...，每个Node结构如下</p><p>[LeafFlag][KeyNumbers][SiblingUid]</p><p>[Son0][Key0][Son1][Key1]</p><p>其中LeafFlag标记了该节点是否是个叶子节点，KeyNumber为该节点中Key的个数，SiblingUid是其兄弟节点存储在DM中的UID，后续是穿插的子节点(SonN)和KeyN，最后一个keyN始终为MAX_VALUE，以此方便查找 其中key就是对应的值，son就是该值对应的位置，但是在叶子节点与非叶子节点还是存在一定的区别</p><p>LeafFlag 一个字节<br> KeyNumber 二个字节<br> SiblingUid 八个字节<br> Son0 八个字节<br> Key0 八个字节</p><figure><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429213310.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="node中的简单方法" tabindex="-1"><a class="header-anchor" href="#node中的简单方法" aria-hidden="true">#</a> Node中的简单方法</h2><h3 id="设置与判断是否是叶子节点" tabindex="-1"><a class="header-anchor" href="#设置与判断是否是叶子节点" aria-hidden="true">#</a> 设置与判断是否是叶子节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setRawIsLeaf</span><span class="token punctuation">(</span><span class="token class-name">SubArray</span> raw<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isLeaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isLeaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            raw<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>raw<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token constant">IS_LEAF_OFFSET</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            raw<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>raw<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token constant">IS_LEAF_OFFSET</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getRawIfLeaf</span><span class="token punctuation">(</span><span class="token class-name">SubArray</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> raw<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>raw<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token constant">IS_LEAF_OFFSET</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成根节点" tabindex="-1"><a class="header-anchor" href="#生成根节点" aria-hidden="true">#</a> 生成根节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newRootRaw</span><span class="token punctuation">(</span><span class="token keyword">long</span> left<span class="token punctuation">,</span> <span class="token keyword">long</span> right<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">SubArray</span> raw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">NODE_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NODE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawIsLeaf</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> raw<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成空的节点数据" tabindex="-1"><a class="header-anchor" href="#生成空的节点数据" aria-hidden="true">#</a> 生成空的节点数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newNilRootRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        <span class="token class-name">SubArray</span> raw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">NODE_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NODE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setRawIsLeaf</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> raw<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复制数据" tabindex="-1"><a class="header-anchor" href="#复制数据" aria-hidden="true">#</a> 复制数据</h3><p>从一个节点的第几个子节点的数据复制到另一个节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyRawFromKth</span><span class="token punctuation">(</span><span class="token class-name">SubArray</span> from<span class="token punctuation">,</span> <span class="token class-name">SubArray</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token keyword">int</span> kth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> offset <span class="token operator">=</span> from<span class="token punctuation">.</span>start<span class="token operator">+</span><span class="token constant">NODE_HEADER_SIZE</span><span class="token operator">+</span>kth<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>raw<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">.</span>raw<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">.</span>start<span class="token operator">+</span><span class="token constant">NODE_HEADER_SIZE</span><span class="token punctuation">,</span> from<span class="token punctuation">.</span>end<span class="token operator">-</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="向后移动一个节点" tabindex="-1"><a class="header-anchor" href="#向后移动一个节点" aria-hidden="true">#</a> 向后移动一个节点</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shiftRawKth</span><span class="token punctuation">(</span><span class="token class-name">SubArray</span> raw<span class="token punctuation">,</span> <span class="token keyword">int</span> kth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> begin <span class="token operator">=</span> raw<span class="token punctuation">.</span>start<span class="token operator">+</span><span class="token constant">NODE_HEADER_SIZE</span><span class="token operator">+</span><span class="token punctuation">(</span>kth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> end <span class="token operator">=</span> raw<span class="token punctuation">.</span>start<span class="token operator">+</span><span class="token constant">NODE_SIZE</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> begin<span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            raw<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> raw<span class="token punctuation">.</span>raw<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面都是一个Node中的简单方法，基本都是很简单的所以就不过多的赘述，下面就讲一下Node节点中比较难的方法</p><h2 id="node中较难的方法" tabindex="-1"><a class="header-anchor" href="#node中较难的方法" aria-hidden="true">#</a> Node中较难的方法</h2><h3 id="node中的返回值" tabindex="-1"><a class="header-anchor" href="#node中的返回值" aria-hidden="true">#</a> Node中的返回值</h3><p>先来了解一下Node节点中的一些返回值这样有助于我们理解方法</p><p>SearchNextRes 就是你查询一个key时，如果你查询到了满足条件的值则返回uid，siblingUid为0，如果这个节点没有查询到则返回其兄弟节点siblingUid，Uid为0</p><p>LeafSearchRangeRes 这个是只在叶子节点中查询，有可能其兄弟节点也存在可能的值，所以返回其兄弟节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">SearchNextRes</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> uid<span class="token punctuation">;</span>
        <span class="token keyword">long</span> siblingUid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">class</span> <span class="token class-name">LeafSearchRangeRes</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids<span class="token punctuation">;</span>
        <span class="token keyword">long</span> siblingUid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">class</span> <span class="token class-name">InsertAndSplitRes</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> siblingUid<span class="token punctuation">,</span> newSon<span class="token punctuation">,</span> newKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">SplitRes</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> newSon<span class="token punctuation">,</span> newKey<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="searchnext" tabindex="-1"><a class="header-anchor" href="#searchnext" aria-hidden="true">#</a> searchNext</h3><p>查找到key对应的位置，有可能返回的是非叶子节点，有可能是叶子节点，这可以通过节点的首位是否LeafFlag是来判断，这里只会查询当前这一个节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">SearchNextRes</span> <span class="token function">searchNext</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataItem<span class="token punctuation">.</span><span class="token function">rLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">SearchNextRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchNextRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> noKeys <span class="token operator">=</span> <span class="token function">getRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> noKeys<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> ik <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">&lt;</span> ik<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token function">getRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span>siblingUid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            res<span class="token punctuation">.</span>uid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>siblingUid <span class="token operator">=</span> <span class="token function">getRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            dataItem<span class="token punctuation">.</span><span class="token function">rUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="leafsearchrange" tabindex="-1"><a class="header-anchor" href="#leafsearchrange" aria-hidden="true">#</a> leafSearchRange</h3><p>这个方法是只存在叶子节点中的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">LeafSearchRangeRes</span> <span class="token function">leafSearchRange</span><span class="token punctuation">(</span><span class="token keyword">long</span> leftKey<span class="token punctuation">,</span> <span class="token keyword">long</span> rightKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataItem<span class="token punctuation">.</span><span class="token function">rLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//当前节点有多少个儿子节点</span>
            <span class="token keyword">int</span> noKeys <span class="token operator">=</span> <span class="token function">getRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> kth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token comment">//找到leftKey在Node的数据中是第几个SnoKey组合</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>kth <span class="token operator">&lt;</span> noKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> ik <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ik <span class="token operator">&gt;=</span> leftKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                kth <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//将这个方位内的SonN全保存下来</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>kth <span class="token operator">&lt;</span> noKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> ik <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ik <span class="token operator">&lt;=</span> rightKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    uids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    kth <span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">long</span> siblingUid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token comment">//有可能不止这个节点有，所以把它的兄弟节点保存下来</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>kth <span class="token operator">==</span> noKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                siblingUid <span class="token operator">=</span> <span class="token function">getRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">LeafSearchRangeRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeafSearchRangeRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>uids <span class="token operator">=</span> uids<span class="token punctuation">;</span>
            res<span class="token punctuation">.</span>siblingUid <span class="token operator">=</span> siblingUid<span class="token punctuation">;</span>
            <span class="token keyword">return</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            dataItem<span class="token punctuation">.</span><span class="token function">rUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InsertAndSplitRes这是一个插入并且分割的方法，其中主要使用的是Insert与Split所以先单独讲insert与split</p><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert" aria-hidden="true">#</a> insert</h3><p>因为insert方法对于叶子节点与非叶子节点来说都是需要使用到的所以在这里合并为两个方法</p><ol><li>找到对应的位置</li><li>如果当前节点查询完所有的节点并且下一个节点不为空，那么返回false，因为你插入的位置可能为下一个节点(比如当前节点的数量为3，分别为1，2，3，而你要插入的数据为4，并且存在兄弟节点这说明当前节点已经满了插入不下所以返回false)</li><li>现在要判断是否是叶子节点，因为这两个插入是不同的</li></ol><ul><li>如果是叶子节点 则直接插入节点中</li><li>非叶子节点</li></ul><p>首先这个非叶子的插入是不会通过外界数据插入到非叶子节点，这是什么意思呢就是插入到非叶子节点的数据只会是由内部经过一系列操作然后返回进行插入，而不会由外部</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> noKeys <span class="token operator">=</span> <span class="token function">getRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> kth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>kth <span class="token operator">&lt;</span> noKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> ik <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ik <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                kth <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        
        <span class="token keyword">if</span><span class="token punctuation">(</span>kth <span class="token operator">==</span> noKeys <span class="token operator">&amp;&amp;</span> <span class="token function">getRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

       
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getRawIfLeaf</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">//如果是叶子节点</span>
            <span class="token function">shiftRawKth</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> key<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> noKeys<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        
        	<span class="token comment">//这里就是非叶子节点的插入</span>
        	
            <span class="token keyword">long</span> kk <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> key<span class="token punctuation">,</span> kth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">shiftRawKth</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawKthKey</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> kk<span class="token punctuation">,</span> kth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawKthSon</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> kth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> noKeys<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> Split</h3><p>这个方法较为简单，因为这个方法只需要将原来节点分为两半，然后返回新节点的首个key与uid即可,这里的key与非叶子节点的key不同 返回新节点的key与son 其中key就是Node节点的第一个key的值，son就是新节点的位置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token class-name">SplitRes</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SubArray</span> nodeRaw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token constant">NODE_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NODE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawIsLeaf</span><span class="token punctuation">(</span>nodeRaw<span class="token punctuation">,</span> <span class="token function">getRawIfLeaf</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>nodeRaw<span class="token punctuation">,</span> <span class="token constant">BALANCE_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawSibling</span><span class="token punctuation">(</span>nodeRaw<span class="token punctuation">,</span> <span class="token function">getRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">copyRawFromKth</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> nodeRaw<span class="token punctuation">,</span> <span class="token constant">BALANCE_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> son <span class="token operator">=</span> tree<span class="token punctuation">.</span>dm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagerImpl</span><span class="token punctuation">.</span><span class="token constant">SUPER_XID</span><span class="token punctuation">,</span> nodeRaw<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawNoKeys</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> <span class="token constant">BALANCE_NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">,</span> son<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SplitRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplitRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span>newSon <span class="token operator">=</span> son<span class="token punctuation">;</span>
        res<span class="token punctuation">.</span>newKey <span class="token operator">=</span> <span class="token function">getRawKthKey</span><span class="token punctuation">(</span>nodeRaw<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insertandsplit" tabindex="-1"><a class="header-anchor" href="#insertandsplit" aria-hidden="true">#</a> insertAndSplit</h3><p>首先调用插入方法，如果插入失败就是当前节点已经满了并且在这之前无法插入，直接返回兄弟节点UID即可 如果插入成功判断是否分割，如果不需要分割则直接返回即可，如果需要分割则调用分割方法 然后将对应的newSon与newKey返回</p><p>由insert知道插入失败只有一种情况那就是当前节点不能插入只有下一个节点能够插入所以返回兄弟节点</p><p>如果需要分割还需要返回新的key与son</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">InsertAndSplitRes</span> <span class="token function">insertAndSplit</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Exception</span> err <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertAndSplitRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertAndSplitRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        dataItem<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            success <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 插入失败,则应该把这个节点插入到当前层次的下一个节点</span>
                res<span class="token punctuation">.</span>siblingUid <span class="token operator">=</span> <span class="token function">getRawSibling</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">needSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果插入成功判断是否需要分割</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">SplitRes</span> r <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span>newSon <span class="token operator">=</span> r<span class="token punctuation">.</span>newSon<span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span>newKey <span class="token operator">=</span> r<span class="token punctuation">.</span>newKey<span class="token punctuation">;</span>
                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    err <span class="token operator">=</span> e<span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dataItem<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagerImpl</span><span class="token punctuation">.</span><span class="token constant">SUPER_XID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dataItem<span class="token punctuation">.</span><span class="token function">unBefore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树" aria-hidden="true">#</a> B+树</h2><h3 id="创建b-树" tabindex="-1"><a class="header-anchor" href="#创建b-树" aria-hidden="true">#</a> 创建B+树</h3><p>创建的是一个叶子节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">DataManager</span> dm<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawRoot <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token function">newNilRootRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//Uid 已经保存了页号与偏移量</span>
        <span class="token keyword">long</span> rootUid <span class="token operator">=</span> dm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagerImpl</span><span class="token punctuation">.</span><span class="token constant">SUPER_XID</span><span class="token punctuation">,</span> rawRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将头节点的位置插入到页面里面</span>
        <span class="token comment">//然后把位置返回</span>
        <span class="token keyword">return</span> dm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TransactionManagerImpl</span><span class="token punctuation">.</span><span class="token constant">SUPER_XID</span><span class="token punctuation">,</span> <span class="token class-name">Parser</span><span class="token punctuation">.</span><span class="token function">long2Byte</span><span class="token punctuation">(</span>rootUid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="searchnext-1" tabindex="-1"><a class="header-anchor" href="#searchnext-1" aria-hidden="true">#</a> searchNext</h3><p>调用Node中的即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">searchNext</span><span class="token punctuation">(</span><span class="token keyword">long</span> nodeUid<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nodeUid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SearchNextRes</span> res <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">searchNext</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>uid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span>uid<span class="token punctuation">;</span>
            nodeUid <span class="token operator">=</span> res<span class="token punctuation">.</span>siblingUid<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="searchrange" tabindex="-1"><a class="header-anchor" href="#searchrange" aria-hidden="true">#</a> searchRange</h3><p>范围查询</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">long</span> leftKey<span class="token punctuation">,</span> <span class="token keyword">long</span> rightKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> rootUid <span class="token operator">=</span> <span class="token function">rootUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> leafUid <span class="token operator">=</span> <span class="token function">searchLeaf</span><span class="token punctuation">(</span>rootUid<span class="token punctuation">,</span> leftKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> leaf <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> leafUid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">LeafSearchRangeRes</span> res <span class="token operator">=</span> leaf<span class="token punctuation">.</span><span class="token function">leafSearchRange</span><span class="token punctuation">(</span>leftKey<span class="token punctuation">,</span> rightKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            leaf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            uids<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>uids<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>siblingUid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                leafUid <span class="token operator">=</span> res<span class="token punctuation">.</span>siblingUid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> uids<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="insert-1" tabindex="-1"><a class="header-anchor" href="#insert-1" aria-hidden="true">#</a> insert</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">long</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> rootUid <span class="token operator">=</span> <span class="token function">rootUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InsertRes</span> res <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>rootUid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> res <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>newNode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">updateRootUid</span><span class="token punctuation">(</span>rootUid<span class="token punctuation">,</span> res<span class="token punctuation">.</span>newNode<span class="token punctuation">,</span> res<span class="token punctuation">.</span>newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">InsertRes</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">long</span> nodeUid<span class="token punctuation">,</span> <span class="token keyword">long</span> uid<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nodeUid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isLeaf <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">InsertRes</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isLeaf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">insertAndSplit</span><span class="token punctuation">(</span>nodeUid<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> next <span class="token operator">=</span> <span class="token function">searchNext</span><span class="token punctuation">(</span>nodeUid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InsertRes</span> ir <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ir<span class="token punctuation">.</span>newNode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token function">insertAndSplit</span><span class="token punctuation">(</span>nodeUid<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>newNode<span class="token punctuation">,</span> ir<span class="token punctuation">.</span>newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">InsertRes</span> <span class="token function">insertAndSplit</span><span class="token punctuation">(</span><span class="token keyword">long</span> nodeUid<span class="token punctuation">,</span> <span class="token keyword">long</span> uid<span class="token punctuation">,</span> <span class="token keyword">long</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nodeUid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InsertAndSplitRes</span> iasr <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">insertAndSplit</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>iasr<span class="token punctuation">.</span>siblingUid <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nodeUid <span class="token operator">=</span> iasr<span class="token punctuation">.</span>siblingUid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">InsertRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                res<span class="token punctuation">.</span>newNode <span class="token operator">=</span> iasr<span class="token punctuation">.</span>newSon<span class="token punctuation">;</span>
                res<span class="token punctuation">.</span>newKey <span class="token operator">=</span> iasr<span class="token punctuation">.</span>newKey<span class="token punctuation">;</span>
                <span class="token keyword">return</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","7.html.vue"]]);export{k as default};
