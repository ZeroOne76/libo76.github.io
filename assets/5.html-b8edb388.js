import{_ as n,X as s,Y as a,a3 as p}from"./framework-4966486c.js";const t={},e=p(`<p>前面我们已经讲了DM中DataItem与Log对象现在我们就讲一下VM中的对象和什么是事务抽象 前面DM与TM都是比较简单的都是基于文件的操作，而VM就比较难，在VM层实现了死锁的检测、两种隔离级别(读已提交与可重复读) 所以我们先从简单的讲起</p><h2 id="vm中的对象" tabindex="-1"><a class="header-anchor" href="#vm中的对象" aria-hidden="true">#</a> VM中的对象</h2><p>VM中的对象是一个Entry结构，每个Entry对象的结构为</p><p>[xmin][xmax][Data]</p><p>xim 八个字节是创建该记录的事务编号<br> xmax 八个字节是删除该条记录的事务编号<br> data 持有的数据</p><figure><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429212206.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="entry对象的包裹" tabindex="-1"><a class="header-anchor" href="#entry对象的包裹" aria-hidden="true">#</a> Entry对象的包裹</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">wrapEntryRaw</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xmin <span class="token operator">=</span> <span class="token class-name">Parser</span><span class="token punctuation">.</span><span class="token function">long2Byte</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xmax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Bytes</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>xmin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="entry对象的读取" tabindex="-1"><a class="header-anchor" href="#entry对象的读取" aria-hidden="true">#</a> Entry对象的读取</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Entry</span> <span class="token function">loadEntry</span><span class="token punctuation">(</span><span class="token class-name">VersionManager</span> vm<span class="token punctuation">,</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">DataItem</span> di <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">VersionManagerImpl</span><span class="token punctuation">)</span>vm<span class="token punctuation">)</span><span class="token punctuation">.</span>dm<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">newEntry</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> di<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务抽象" tabindex="-1"><a class="header-anchor" href="#事务抽象" aria-hidden="true">#</a> 事务抽象</h2><p>为什么需要事务的抽象，事务的抽象其实就是内存中的事务结合，而且也是为了能够实现可重复读的关键</p><p>xid 事务id<br> level 当前的隔离级别 (readComitted / repeatableRead)<br> snapshot 当前事务时的快照数据<br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">long</span> xid<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> snapshot<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Exception</span> err<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> autoAborted<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isinsnapshot" tabindex="-1"><a class="header-anchor" href="#isinsnapshot" aria-hidden="true">#</a> isInSnapshot</h3><p>判断这个事务在不在当前事务开启的时候的快照中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isInSnapshot</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>xid <span class="token operator">==</span> <span class="token class-name">TransactionManagerImpl</span><span class="token punctuation">.</span><span class="token constant">SUPER_XID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> snapshot<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里是不是感觉VM很简单，哈哈哈那就错了因为难的还在后面</p><h2 id="死锁检测" tabindex="-1"><a class="header-anchor" href="#死锁检测" aria-hidden="true">#</a> 死锁检测</h2><p>为什么需要死锁检测，假如没有死锁检测，假如事务Ti需要给修改数据X然后修改为X+1，然后要继续修改Y，但是事务Tj在事务Ti需修改X的时候修改了Y=Y+1，然后准备修改X，这个事务TI持有X需要修改Y，事务Tj持有Y需要修改X，这个时候就产生了死锁，所有都需要等待对方释放锁，所有可以抽象为有向边Ti -&gt; Tj 就表示 Ti 在等待 Tj，这样无数的有向边就可以形成一个图，检测死锁也就简单了，只需要维护这个图中是否有环</p><h3 id="locktable" tabindex="-1"><a class="header-anchor" href="#locktable" aria-hidden="true">#</a> LockTable</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> x2u<span class="token punctuation">;</span>  <span class="token comment">// 某个XID已经获得的资源的UID列表</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> u2x<span class="token punctuation">;</span>        <span class="token comment">// UID被某个XID持有</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wait<span class="token punctuation">;</span> <span class="token comment">// 正在等待UID的XID列表</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Lock</span><span class="token punctuation">&gt;</span></span> waitLock<span class="token punctuation">;</span>   <span class="token comment">// 正在等待资源的XID的锁</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> waitU<span class="token punctuation">;</span>      <span class="token comment">// XID正在等待的UID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="islist" tabindex="-1"><a class="header-anchor" href="#islist" aria-hidden="true">#</a> isList</h3><p>判断当前事务需要的资源在不在当前事务已经获取的资源里面(相当于重入) 比如事务T获取数据U1，然后第二次获取U1对于事务T来说也是可见的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isInList</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listMap<span class="token punctuation">,</span> <span class="token keyword">long</span> uid0<span class="token punctuation">,</span> <span class="token keyword">long</span> uid1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> listMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> e <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">==</span> uid1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add</h3><p>这就是具体进行死锁检测的方法</p><p>判断步骤如下</p><ol><li>判断当前事务T获取的资源是不是已经在之前被本身事务T获取，如果是返回null(可重入)</li><li>如果当前资源在之前没有被当前事务获取过，那么判断当前资源是否被其它事务占有，如果没有被其它事务占用，那么当前事务占有该数据,并且放入u2x与x2u</li></ol><p>上面的都是成功获取到资源然后放入LockTable中</p><p>如果不满足上面两个条件</p><ol><li>把当前事务放入wait与waitu中</li><li>然后进行死锁检测，如果添加过后存在死锁那么需要移除刚添加的并抛出异常</li><li>如果不存在死锁，那么就可以继续等待</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Lock</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token keyword">long</span> uid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isInList</span><span class="token punctuation">(</span>x2u<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u2x<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                u2x<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">putIntoList</span><span class="token punctuation">(</span>x2u<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            waitU<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">putIntoList</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                waitU<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">removeFromList</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>DeadlockException</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Lock</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            waitLock<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> l<span class="token punctuation">;</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="死锁检测-1" tabindex="-1"><a class="header-anchor" href="#死锁检测-1" aria-hidden="true">#</a> 死锁检测</h3><p>这里的死锁检测就是通过DFS遍历，如果在这次遍历过程中遍历到了这次遍历过程遇到的事务Ti那么就产生了死锁 这里画图来理解(图有点丑)</p><p><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429212233.png" alt="" loading="lazy"><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429212300.png" alt="" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasDeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xidStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stamp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid <span class="token operator">:</span> x2u<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> s <span class="token operator">=</span> xidStamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stamp <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> stp <span class="token operator">=</span> xidStamp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>stp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> stp <span class="token operator">==</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>stp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> stp <span class="token operator">&lt;</span> stamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        xidStamp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Long</span> uid <span class="token operator">=</span> waitU<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>uid <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> x <span class="token operator">=</span> u2x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">assert</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","5.html.vue"]]);export{k as default};
