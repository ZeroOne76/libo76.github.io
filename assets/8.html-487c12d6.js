import{_ as n,X as s,Y as a,a3 as p}from"./framework-4966486c.js";const t={},e=p(`<p>TBM中的文件是其实是一个固定大小的文件因为他保存的只是最新文件的在.db文件中保存的位置即该文件在.db文件中的UID</p><h2 id="表中字段" tabindex="-1"><a class="header-anchor" href="#表中字段" aria-hidden="true">#</a> 表中字段</h2><p>表中存在字段，而字段是[FileldName][TypeName][IndexUid]，其中FiledName为表中字段名，TypeName为字段类型，IndexUid为索引二叉树的根，否则为0 因为其中Field与TypeName都是字符串类型且Fileld的长度不同，所以都是以[String Length]与[StringData]表示 其中StringLength占四个字节、IndexUid为8个字节</p><p>所以字段的结构图为</p><figure><img src="https://cdn.jsdelivr.net/gh/CodeVmore/images/blog/20230429213810.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="表的结构" tabindex="-1"><a class="header-anchor" href="#表的结构" aria-hidden="true">#</a> 表的结构</h2><p>表的结构是是[TableName][NextTable][FieldUid][FieldUid].... 其中TableName的名称也是上面的String类型,这个比较简单所以就不画图</p><h2 id="parsewhere" tabindex="-1"><a class="header-anchor" href="#parsewhere" aria-hidden="true">#</a> parseWhere</h2><p>虽然这不重要但是基本每个语句都要使用到它 这个是用来解析Where条件的</p><ul><li>如果where条件为空，那么返回这个表中的第一个Index索引的UID</li><li>如果不为空则解析通过字段B+树查询，然后返回UIDS</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseWhere</span><span class="token punctuation">(</span><span class="token class-name">Where</span> where<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> l1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> single <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> fd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>where <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isIndexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    fd <span class="token operator">=</span> field<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            l0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            r0 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            single <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>where<span class="token punctuation">.</span>singleExp1<span class="token punctuation">.</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isIndexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>FieldNotIndexedException</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    fd <span class="token operator">=</span> field<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>FieldNotFoundException</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">CalWhereRes</span> res <span class="token operator">=</span> <span class="token function">calWhere</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> where<span class="token punctuation">)</span><span class="token punctuation">;</span>
            l0 <span class="token operator">=</span> res<span class="token punctuation">.</span>l0<span class="token punctuation">;</span> r0 <span class="token operator">=</span> res<span class="token punctuation">.</span>r0<span class="token punctuation">;</span>
            l1 <span class="token operator">=</span> res<span class="token punctuation">.</span>l1<span class="token punctuation">;</span> r1 <span class="token operator">=</span> res<span class="token punctuation">.</span>r1<span class="token punctuation">;</span>
            single <span class="token operator">=</span> res<span class="token punctuation">.</span>single<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>l0<span class="token punctuation">,</span> r0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>single<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            uids<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> uids<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="delete操作" tabindex="-1"><a class="header-anchor" href="#delete操作" aria-hidden="true">#</a> delete操作</h2><ol><li>首先经过解析成为Delete类型</li><li>然后解析找到每个字段和值对应的UID</li><li>然后循环遍历删除</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Delete</span> delete<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> <span class="token function">parseWhere</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> uid <span class="token operator">:</span> uids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                count <span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="read操作" tabindex="-1"><a class="header-anchor" href="#read操作" aria-hidden="true">#</a> read操作</h2><ol><li>解析条件</li><li>二叉树查询</li><li>返回</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Select</span> read<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> <span class="token function">parseWhere</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> uid <span class="token operator">:</span> uids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>raw <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> <span class="token function">parseEntry</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">printEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update操作" tabindex="-1"><a class="header-anchor" href="#update操作" aria-hidden="true">#</a> update操作</h2><p>update在这里就可以看出为啥vm没有提供update方法，因为update方法可以看作是先delete再insert</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Update</span> update<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> uids <span class="token operator">=</span> <span class="token function">parseWhere</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> fd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>fieldName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fd <span class="token operator">=</span> f<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>FieldNotFoundException</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Object</span> value <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">string2Value</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> uid <span class="token operator">:</span> uids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>raw <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>

            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> <span class="token function">parseEntry</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            entry<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>fieldName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            raw <span class="token operator">=</span> <span class="token function">entry2Raw</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> uuid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            count <span class="token operator">++</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isIndexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    field<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="insert方法-不支持批量插入" tabindex="-1"><a class="header-anchor" href="#insert方法-不支持批量插入" aria-hidden="true">#</a> insert方法(不支持批量插入)</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Insert</span> insert<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> <span class="token function">string2Entry</span><span class="token punctuation">(</span>insert<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> raw <span class="token operator">=</span> <span class="token function">entry2Raw</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> uid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TableManagerImpl</span><span class="token punctuation">)</span>tbm<span class="token punctuation">)</span><span class="token punctuation">.</span>vm<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isIndexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                field<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tbm中的事务" tabindex="-1"><a class="header-anchor" href="#tbm中的事务" aria-hidden="true">#</a> TBM中的事务</h2><p>TBM中的Begin、Commi、Abort是最简单的三种情况因为这直接调用vm向上层抽象的即可 同时增删改查也直接调用Table中的就行、</p><p>TBM中的方法都是很简单的直接调用就行，TM或者VM都已经实现完毕！！！ TBM中的Begin、Commi、Abort是最简单的三种情况因为这直接调用vm向上层抽象的即可 同时增删改查也直接调用Table中的就行、</p><p>TBM中的方法都是很简单的直接调用就行，Table或者VM都已经实现完毕！！！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BeginRes</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token class-name">Begin</span> begin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeginRes</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeginRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> level <span class="token operator">=</span> begin<span class="token punctuation">.</span>isRepeatableRead<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span>xid <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">&quot;begin&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        vm<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;commit&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vm<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;abort&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create方法这是用来建表的语句</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Create</span> create<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tableCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>create<span class="token punctuation">.</span>tableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>DuplicatedTableException</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Table</span> table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">firstTableUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xid<span class="token punctuation">,</span> create<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">updateFirstTableUid</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tableCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>create<span class="token punctuation">.</span>tableName<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>xidTableCache<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                xidTableCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            xidTableCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;create &quot;</span> <span class="token operator">+</span> create<span class="token punctuation">.</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增删改查</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Select</span> read<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> tableCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>read<span class="token punctuation">.</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>TableNotFoundException</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Update</span> update<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> tableCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>TableNotFoundException</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;update &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">long</span> xid<span class="token punctuation">,</span> <span class="token class-name">Delete</span> delete<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> tableCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>table <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">Error<span class="token punctuation">.</span>TableNotFoundException</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>xid<span class="token punctuation">,</span> delete<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">&quot;delete &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","8.html.vue"]]);export{k as default};
